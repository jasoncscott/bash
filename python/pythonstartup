# =============================================================================
# Python Startup
# =============================================================================
"""Python Startup

"""


# =============================================================================
# IMPORTS
# =============================================================================

# Append path
import os
import sys
sys.path.append(os.path.join("Z:", os.sep, "Development", "python", "site-packages"))

# Standard Modules
from atexit import register
from os import environ, path
import platform
#import readline2

# Third-Party Modules
if platform.system() == "Windows":
    try:
        from pyreadline3 import Readline  # `readline` not available on Windows
        readline = Readline()
    except ModuleNotFoundError as e:
        print(f"\nWARNING: History cannot be read or saved. {e}\n")
else:
    import readline


# =============================================================================
# GLOBALS
# =============================================================================

# History Location
python_history = path.join(environ["DOTFILES_LOC"], "python", "python_history")


# =============================================================================
# PUBLIC FUNCTIONS
# =============================================================================

def save_history(python_history=python_history):
    """Handler for saving history."""
    if platform.system() == "Windows":
        try:
            from pyreadline3 import Readline  # `readline` not available on Windows
            readline = Readline()
        except ModuleNotFoundError as e:
            print(f"\nWARNING: History cannot be saved. {e}\n")
    else:
        import readline

    if "readline" in sys.modules:
        readline.write_history_file(python_history)


# =============================================================================
# STARTUP
# =============================================================================

# Reading History
if path.exists(python_history):
    if "readline" in sys.modules:
        readline.set_history_length(10000)
        readline.read_history_file(python_history)

# Enable Completion
if "readline" in sys.modules:
    readline.parse_and_bind("tab: complete")


# Register Saving History Handler
if "readline" in sys.modules:
    register(save_history)

# Cleanup
for module in ["environ", "platform", "path", "readline", "register", "python_history", "save_history"]:
    try:
        del module
    except NameError:
        pass
