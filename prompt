# =============================================================================
# PROMPT
# =============================================================================

# =============================================================================
# LOCATION
# =============================================================================

.location() {
    printf '%4s' ${LOCATION^^}
}


# =============================================================================
# HOSTNAME
# =============================================================================

.host() {
    USER_HOST_LOC=USER_HOST_${M_LOCATION^^}
    case ${HOSTNAME} in
        ${!USER_HOST_LOC})
            printf "MAIN ${M_LOCATION^^} HOST - ${HOSTNAME}"
            ;;
        ${USER_HOST_GUAC}*)
            printf 'GUACAMOLE'
            ;;
        [[:xdigit:]][[:xdigit:]][[:xdigit:]][[:xdigit:]][[:xdigit:]]*)
            printf 'DOCKER'
            ;;
        *)
            printf ${HOSTNAME}
            ;;
    esac
}


# =============================================================================
# SHLVL
# =============================================================================

if [ -z ${SHLVL_INIT} ] && [[ $- == *i* ]]; then
    export SHLVL_INIT=${SHLVL}
fi

.subshell() {
    if [ ${SHLVL} -gt ${SHLVL_INIT} ]; then
        printf " \e[7;3;4m(Subshell)"
    fi

    if ! [ -z ${REZ_VERSION} ]; then
        printf " \e[7;3;4m(REZ)"
    fi
}

# =============================================================================
# LOCAL / REMOTE / DOCKER
# =============================================================================

.remote() {
    #ssh_process=$(ps -no-headers -o comm ${PPID} | grep "sshd")
    ssh_process=$(ps -p ${PPID} | grep "sshd")

    if [ "${ssh_process}" == "sshd" ]; then
        printf "\e[7mRemote"
    else
        #if [ -f "/proc/*/cgroup" && "$(grep docker /proc/*/cgroup)" ]; then
        #    printf "\e[7;3;4mDocker"
        #    echo -ne "\033]0;Docker\007"
        #else
            printf "Local"
        #fi
    fi
}


# =============================================================================
# PIPELINE
# =============================================================================

# Set default values for variables that don't exist yet
.show_variables() {
    #if [ -z "${SHOW}" ]; then printf "[none]"; else printf "${SHOW}"; fi
    if [ -z "${SHOW}" ]; then printf "show"; else printf "${SHOW}"; fi
    #if [ -z "${SEQUENCE}" ]; then printf "/[none]"; else printf "/${SEQUENCE}"; fi
    if [ -z "${SEQUENCE}" ]; then printf "/sequence"; else printf "/${SEQUENCE}"; fi
    #if [ -z "${SHOT}" ]; then printf "/[none]"; else printf "/${SHOT}"; fi
    if [ -z "${SHOT}" ]; then printf "/shot"; else printf "/${SHOT}"; fi
    #if [ -z "${TASK}" ]; then printf ":[none]"; else printf ":${TASK}"; fi
    if [ -z "${TASK}" ]; then printf ":task"; else printf ":${TASK}"; fi
    #if [ -z "${VIEW}" ]; then printf ":[none]"; else printf ":${VIEW}"; fi
    if [ -z "${VIEW}" ]; then printf " View: [view]"; else printf ":${VIEW}"; fi
}

# =============================================================================
# Directory Information
# =============================================================================

.directory() {
    # Git
    if [ -d "${PWD}/.git" ]; then
        printf 'git repo - branch: '
    else
        printf '(just a normal directory)'
    fi
}


# =============================================================================
# TITLE
# =============================================================================

.title() {
    title=$(xprop -id $(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2) _NET_WM_NAME | awk -F\" '{print $2}')
    #echo -ne "\033]0;${title}\007";

    # Change Konsole Tab Title
    #if [ -n "${KONSOLE_DBUS_SESSION}" ]; then
    #    qdbus org.kde.konsole ${KONSOLE_DBUS_SESSION} org.kde.konsole.Session.setTitle 1 ${M_LEVEL}:${M_TASK};
    #fi
}


# =============================================================================
# __git_ps1 PRE
# =============================================================================

# Single quotes to preserve functions for __git_ps1; double quotes for colors
# Separate each command with a blank newline
__git_ps1_pre="\n\n"

__git_ps1_pre+="\[${BIRed}\]"
# Location
__git_ps1_pre+=" $(.location)"
__git_ps1_pre+="\[${Color_Off}\]"

__git_ps1_pre+=' | '

__git_ps1_pre+="\[${BIGreen}\]"
# Prompt Timestamp
__git_ps1_pre+='\t'
__git_ps1_pre+="\[${Color_Off}\]"

__git_ps1_pre+=' | '

__git_ps1_pre+="\[${BIBlue}\]"
# Host and OS
#__git_ps1_pre+="$(.host)"
__git_ps1_pre+='\h'
if [ ! -z ${METHOD_OS} ]; then
    __git_ps1_pre+=' (${METHOD_OS})'
else
    __git_ps1_pre+=' (${OS})'
fi
__git_ps1_pre+="\[${Color_Off}\]"

__git_ps1_pre+=' | '

__git_ps1_pre+="\[${IWhite}\]"
# User
__git_ps1_pre+='\u'
__git_ps1_pre+="\[${Color_Off}\]"

__git_ps1_pre+=' | '

__git_ps1_pre+="\[${BIYellow}\]"
# Shell Level
__git_ps1_pre+="SHLVL: ${SHLVL}$(.subshell)"
__git_ps1_pre+="\[${Color_Off}\]"

__git_ps1_pre+=' | '

__git_ps1_pre+="\[${BIPurple}\]"
# Local / Remote / Docker
__git_ps1_pre+="$(.remote)"
__git_ps1_pre+="\[${Color_Off}\]"

__git_ps1_pre+=' | '

__git_ps1_pre+="\[${ICyan}\]"
# Method Pipeline
__git_ps1_pre+="$(.show_variables)"
__git_ps1_pre+="\[${Color_Off}\]"


# =============================================================================
# __git_ps1 POST
# =============================================================================

__git_ps1_post='\n'
__git_ps1_post+="\[${BWhite}\]"
# Present Working Directory on newline
__git_ps1_post+='\w'
__git_ps1_post+="\[${Color_Off}\]"

# Put prompt on newline
__git_ps1_post+='\n> '
#__git_ps1_post+=$(.title)


# =============================================================================
# PROMPT_COMMAND (using __git_ps1)
# =============================================================================

# __git_ps1 3 arguments: pre, post, format (split into 2 parts)
export PROMPT_COMMAND='__git_ps1 "${__git_ps1_pre}\n$(.directory)" "${__git_ps1_post}"'
export PROMPT_COMMAND+=' "%s"'
